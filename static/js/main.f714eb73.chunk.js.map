{"version":3,"sources":["components/Header/styles.module.scss","containers/Public/Tree/styles.module.scss","containers/Public/Content/styles.module.scss","containers/Public/TreeList/styles.module.scss","components/Loader/styles.module.scss","containers/Public/HomePage/styles.module.scss","containers/Public/Tree/TreeNode/styles.module.scss","config.ts","stores/items.ts","stores/index.ts","utils/history.ts","components/PrivateRoute/index.tsx","utils/folderData.js","components/Header/index.tsx","containers/Public/Tree/TreeNode/index.tsx","containers/Public/Tree/index.tsx","containers/Public/Content/index.tsx","containers/Public/TreeList/index.tsx","components/Loader/index.tsx","containers/Public/HomePage/index.tsx","containers/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","axios","create","baseURL","process","REACT_APP_HOST","interceptors","response","use","error","Promise","reject","makeAutoObservable","this","reaction","titleId","_","console","log","toJS","data","activeTitle","observable","action","configure","enforceActions","RootStore","ItemsStore","rootStore","createContext","createBrowserHistory","PrivateRoute","path","exact","component","to","treeData","require","v4","key","label","children","Header","title","className","styles","sectionHeader","container","TreeNode","node","common","openedItems","content","onChange","onChangeContent","hasChild","length","visible","find","item","nodeItem","cn","nodeContainer","active","onClick","icon","faCaretRight","innerContainer","Tree","treeList","map","Content","contentContainer","TreeList","useState","items","localStorage","getItem","JSON","parse","setContent","openedFolder","setOpenedFolder","containerTreeList","wripper","arr","index","indexOf","splice","setItem","stringify","Loader","loader","type","color","height","width","timeout","loadingText","HomePage","App","store","history","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,0BAA0B,MAAQ,wB,mBCAhED,EAAOC,QAAU,CAAC,UAAY,0BAA0B,SAAW,2B,mBCAnED,EAAOC,QAAU,CAAC,iBAAmB,iCAAiC,MAAQ,wB,mBCA9ED,EAAOC,QAAU,CAAC,kBAAoB,kCAAkC,QAAU,0B,mBCAlFD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,YAAc,8B,mBCAhED,EAAOC,QAAU,CAAC,UAAY,4B,sDCA9BD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,eAAiB,+BAA+B,QAAU,wBAAwB,cAAgB,8BAA8B,KAAO,qBAAqB,MAAQ,sBAAsB,KAAO,qBAAqB,YAAc,4BAA4B,OAAS,yB,+ECC5SC,EAAMC,OAAO,CAC9BC,QAASC,8HAAYC,iBAMnBC,aAAaC,SAASC,KACxB,SAAAD,GAEE,OAAOA,KAET,SAAAE,GAEE,OAAOC,QAAQC,OAAOF,M,6GCcX,M,aAfb,aAAe,IAAD,qGACZG,YAAmBC,MACnBC,aACE,kBAAM,EAAKC,WACX,SAAAC,GAAC,OAAIC,QAAQC,IAAI,OAAQC,YAAK,EAAKJ,a,8CAGvC,SAAmBK,GACjBP,KAAKE,QAAUK,I,4BAEjB,WACEP,KAAKQ,aAAeR,KAAKQ,gB,0CAd1BC,K,wEAA6B,M,yCAC7BA,K,yEAAkC,K,sCASlCC,K,iHAGAA,K,8ECrBHC,YAAU,CAAEC,eAAgB,a,IAEtBC,G,kHACHJ,K,yEAAwBK,K,GAGrBC,EAAY,IAAIF,EAYP,GAVaG,wBAAyBD,GAUtC,IAAIF,G,OCpBJI,gBCYAC,EATqB,SAAC,GAA+B,EAA7BC,KAA6B,EAAvBC,MAAuB,EAAhBC,UAElD,OACE,kBAAC,IAAD,CAAUC,GAAI,W,gBC8EHC,GAtFQC,EAAQ,KAAvBC,GACS,CACf,CACEC,IAAK,IACLC,MAAO,YACPC,SAAU,CACR,CACEF,IAAK,MACLC,MAAO,eACPC,SAAU,CACR,CACEF,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,wBAMjB,CACED,IAAK,IACLC,MAAO,UACPC,SAAU,CACR,CACEF,IAAK,MACLC,MAAO,iBAET,CACED,IAAK,MACLC,MAAO,kBACPC,SAAU,CACR,CACEF,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,oBAET,CACED,IAAK,MACLC,MAAO,mBACPC,SAAU,CACR,CACEF,IAAK,QACLC,MAAO,oBAET,CACED,IAAK,QACLC,MAAO,oBAET,CACED,IAAK,QACLC,MAAO,oBAET,CACED,IAAK,QACLC,MAAO,0BAQrB,CACED,IAAK,IACLC,MAAO,e,iBCjEIE,EAVwB,SAAC,GAAwB,IAAD,IAArBC,aAAqB,MAAb,OAAa,EAC7D,OACE,4BAAQC,UAAWC,IAAOC,eACxB,yBAAKF,UAAWC,IAAOE,WACrB,wBAAIH,UAAWC,IAAOF,OAAQA,M,6FCgDvBK,EA/C4B,SAAC,GAAyB,IAAD,EAAtBC,EAAsB,EAAtBA,KAASC,EAAa,iBAC1DC,EAAoDD,EAApDC,YAAaC,EAAuCF,EAAvCE,QAASC,EAA8BH,EAA9BG,SAAUC,EAAoBJ,EAApBI,gBAClCC,KAAWN,EAAKR,WAAYQ,EAAKR,SAASe,QAM1CC,EAHeN,EAAYO,MAAK,SAACC,GAAD,OAAkBA,IAASV,EAAKV,OAKtE,OACE,wBAAIK,UAAWC,IAAOe,UACpB,yBAAMhB,UAAWiB,KAAE,mBACdhB,IAAOiB,eAAgB,GADT,cAEdjB,IAAOkB,OAASN,GAFF,IAIjBO,QAAS,WACHf,EAAKR,SACPY,EAASJ,EAAKV,KAEde,EAAgBL,KAIpB,yBAAKL,UAAWC,IAAOI,MACrB,uBAAGL,UAAWiB,IAAGhB,IAAOF,MAAR,eACXE,IAAOxB,aAAqB,OAAP+B,QAAO,IAAPA,OAAA,EAAAA,EAASb,OAAQU,EAAKV,OAG7CgB,GACC,kBAAC,IAAD,CAAiBU,KAAMC,IAActB,UAAWC,IAAOoB,OAExDhB,EAAKT,SAIXe,GACC,yBAAKX,UAAWiB,IAAGhB,IAAOsB,eAAR,eACbtB,IAAOY,QAAUA,KAGpB,kBAAC,EAAD,eAAMrC,KAAM6B,EAAKR,UAAY,IAAQS,O,WChChCkB,EAXoB,SAAC,GAA8B,IAAD,IAA3BhD,YAA2B,MAApB,GAAoB,EAAb8B,EAAa,iBAC/D,OACE,yBAAKN,UAAWC,IAAOE,WACrB,wBAAIH,UAAWC,IAAOwB,UACnBjD,EAAKkD,KAAI,SAAAX,GAAI,OACZ,kBAAC,EAAD,eAAUV,KAAMU,EAAMpB,IAAKoB,EAAKpB,KAASW,U,iBCDpCqB,EARmB,SAAC,GAA2B,IAAD,IAAxB5B,aAAwB,MAAhB,UAAgB,EAC3D,OACE,yBAAKC,UAAWC,IAAO2B,kBACrB,uBAAG5B,UAAWC,IAAOF,OAAQA,K,iBCsDpB8B,EAvDE,WACf,MAA8BC,oBAA6B,WACzD,IAAMC,EAAaC,aAAaC,QAAQ,eACxC,OAAIF,EACuBG,KAAKC,MAAMJ,GAG/B,QANT,mBAAOvB,EAAP,KAAgB4B,EAAhB,KAQA,EAAwCN,oBAAmB,WACzD,IAAMC,EAAaC,aAAaC,QAAQ,iBACxC,OAAIF,EACuBG,KAAKC,MAAMJ,GAG/B,MANT,mBAAOM,EAAP,KAAqBC,EAArB,KA2BA,OACE,6BACE,kBAAC,EAAD,CAAQvC,MAAM,iCACd,yBAAKC,UAAWC,IAAOsC,mBACrB,yBAAKvC,UAAWC,IAAOuC,SACrB,kBAAC,EAAD,CACEhE,KAAMgB,EACNe,YAAa8B,EACb7B,QAASA,EACTC,SAtBO,SAACd,GAChB,IAAI8C,EAAG,YAAOJ,GACRK,EAAQD,EAAIE,QAAQhD,IACX,IAAX+C,EACFD,EAAIG,OAAOF,EAAO,GAElBD,EAAG,sBAAOA,GAAP,CAAY9C,IAEjB2C,EAAgBG,GAChBL,EAAW,MACXJ,aAAaa,QAAQ,gBAAiBX,KAAKY,UAAUL,KAa7C/B,gBA5Bc,SAACL,GACvB+B,EAAW/B,GACX2B,aAAaa,QAAQ,cAAeX,KAAKY,UAAUzC,QA6B9CG,GAAW,kBAAC,EAAD,CAAST,MAAOS,EAAQZ,W,sCCpC7BmD,GAjBU,WACvB,OACE,oCACE,yBAAK/C,UAAWC,KAAO+C,QACrB,kBAAC,KAAD,CACEC,KAAK,UACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,MAEX,wBAAIrD,UAAWC,KAAOqD,aAAtB,iB,oBCAOC,GAXE,WACf,OACE,gCACE,uBAAKvD,UAAWC,KAAOE,WACrB,sCACA,gBAAC,GAAD,SCcOqD,GAdH,WACV,OACE,kBAAC,IAAaC,EACZ,kBAAC,IAAD,CAAQC,QAASA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcrE,OAAK,EAACD,KAAK,WAAWE,UAAWiE,KAC/C,kBAAC,IAAD,CAAOlE,OAAK,EAACD,KAAK,IAAIE,UAAWiE,KACjC,kBAAC,IAAD,CAAOlE,OAAK,EAACD,KAAK,cAAcE,UAAWuC,QCJjC8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCPNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f714eb73.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3l9ie\",\"title\":\"styles_title__3_j6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__10HOQ\",\"treeList\":\"styles_treeList__1Bq3x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentContainer\":\"styles_contentContainer__2VhSj\",\"title\":\"styles_title__33o8r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerTreeList\":\"styles_containerTreeList__3Rbr9\",\"wripper\":\"styles_wripper__3V2bB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__1CU9l\",\"loadingText\":\"styles_loadingText__2P96s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__24Xkw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nodeItem\":\"styles_nodeItem__2IJel\",\"innerContainer\":\"styles_innerContainer__3evTH\",\"visible\":\"styles_visible__32311\",\"nodeContainer\":\"styles_nodeContainer__nmqh8\",\"node\":\"styles_node__3sJn0\",\"title\":\"styles_title__3XBbV\",\"icon\":\"styles_icon__2Ejk9\",\"activeTitle\":\"styles_activeTitle__344Xl\",\"active\":\"styles_active__2fJ-G\"};","import axios from 'axios'\r\n\r\nexport const api = axios.create({\r\n  baseURL: process.env.REACT_APP_HOST,\r\n})\r\n\r\n// here you can define constant's for project or inintial configuration for packages\r\n\r\n// response middleware\r\napi.interceptors.response.use(\r\n  response => {\r\n    // here you can check authorized user or not (401) or something global response functions\r\n    return response\r\n  },\r\n  error => {\r\n    // api error handler\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n","import {\r\n  makeAutoObservable,\r\n  observable,\r\n  action,\r\n  reaction,\r\n  toJS,\r\n  // configure,\r\n  // computed,\r\n  // runInAction,\r\n} from 'mobx'\r\n\r\nclass ItemsStore {\r\n  @observable titleId: string = ''\r\n  @observable activeTitle: boolean = false\r\n\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    reaction(\r\n      () => this.titleId,\r\n      _ => console.log('mobx', toJS(this.titleId))\r\n    )\r\n  }\r\n  @action setTitleId(data: string) {\r\n    this.titleId = data\r\n  }\r\n  @action setActiveTitle() {\r\n    this.activeTitle = !this.activeTitle\r\n  }\r\n}\r\n\r\nexport default new ItemsStore()\r\n","import { createContext, useContext } from 'react'\r\nimport { configure, observable } from 'mobx'\r\nimport ItemsStore from './items'\r\n\r\nconfigure({ enforceActions: 'observed' })\r\n\r\nclass RootStore {\r\n  @observable ItemsStore = ItemsStore\r\n}\r\n\r\nconst rootStore = new RootStore()\r\n\r\nexport const StoreContext = createContext<RootStore>(rootStore)\r\n\r\nexport const useStore = (): RootStore => {\r\n  const store = useContext(StoreContext)\r\n  if (!store) {\r\n    throw new Error('You have forgot to use StoreProvider, shame on you.')\r\n  }\r\n  return store\r\n}\r\n\r\nexport default new RootStore()\r\n","import { createBrowserHistory } from 'history'\r\n\r\nexport default createBrowserHistory()\r\n","import React from 'react'\r\nimport { useStore } from 'stores'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nconst accessToken = true\r\nconst PrivateRoute: React.FC<any> = ({ path, exact, component }) => {\r\n  // const { authAPI } = useStore()\r\n  return accessToken ? (\r\n    <Redirect to={'/home'} />\r\n  ) : (\r\n    <Route path={path} exact={exact} component={component} />\r\n  )\r\n}\r\n\r\nexport default PrivateRoute\r\n","const { v4: uuidv4 } = require('uuid');\r\nconst treeData = [\r\n  {\r\n    key: '1',\r\n    label: 'Documents',\r\n    children: [\r\n      {\r\n        key: '1-1',\r\n        label: 'Document 1-1',\r\n        children: [\r\n          {\r\n            key: '0-1',\r\n            label: 'Document-0-1.doc',\r\n          },\r\n          {\r\n            key: '0-2',\r\n            label: 'Document-0-2.doc',\r\n          },\r\n          {\r\n            key: '0-3',\r\n            label: 'Document-0-3.doc',\r\n          },\r\n          {\r\n            key: '0-4',\r\n            label: 'Document-0-4.doc',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    key: '2',\r\n    label: 'Desktop',\r\n    children: [\r\n      {\r\n        key: '2-1',\r\n        label: 'document1.doc',\r\n      },\r\n      {\r\n        key: '2-2',\r\n        label: 'documennt-2.doc',\r\n        children: [\r\n          {\r\n            key: '2-3',\r\n            label: 'Document-0-1.doc',\r\n          },\r\n          {\r\n            key: '2-4',\r\n            label: 'Document-0-2.doc',\r\n          },\r\n          {\r\n            key: '2-5',\r\n            label: 'Document-0-3.doc',\r\n          },\r\n          {\r\n            key: '2-6',\r\n            label: 'Document-0-4.doc',\r\n            children: [\r\n              {\r\n                key: '2-6-1',\r\n                label: 'Document-0-1.doc',\r\n              },\r\n              {\r\n                key: '2-6-2',\r\n                label: 'Document-0-2.doc',\r\n              },\r\n              {\r\n                key: '2-6-3',\r\n                label: 'Document-0-3.doc',\r\n              },\r\n              {\r\n                key: '2-6-4',\r\n                label: 'Document-0-4.doc',\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    key: '3',\r\n    label: 'Downloads',\r\n  },\r\n]\r\n\r\nexport default treeData\r\n","import React from 'react'\r\nimport styles from './styles.module.scss'\r\n\r\ninterface IHeaderProps {\r\n  title: string\r\n}\r\n\r\nconst Header: React.FC<IHeaderProps> = ({ title = 'Tree' }) => {\r\n  return (\r\n    <header className={styles.sectionHeader}>\r\n      <div className={styles.container}>\r\n        <h3 className={styles.title}>{title}</h3>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { IFolderData } from '../types'\r\nimport { ICommon } from '../types'\r\nimport Tree from '..'\r\nimport styles from './styles.module.scss'\r\nimport cn from 'classnames'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCaretRight } from '@fortawesome/free-solid-svg-icons'\r\n\r\ninterface IPropsTreeNode extends ICommon {\r\n  node: IFolderData\r\n}\r\nconst TreeNode: React.FC<IPropsTreeNode> = ({ node, ...common }) => {\r\n  const { openedItems, content, onChange, onChangeContent } = common\r\n  const hasChild = node.children && node.children.length ? true : false\r\n\r\n  const isVisible = () => {\r\n    const activeItem = openedItems.find((item: string) => item === node.key)\r\n    return activeItem\r\n  }\r\n  const visible = isVisible()\r\n\r\n  return (\r\n    <li className={styles.nodeItem}>\r\n      <div  className={cn({\r\n          [styles.nodeContainer]: true,\r\n          [styles.active]: visible,\r\n        })}\r\n        onClick={() => {\r\n          if (node.children) {\r\n            onChange(node.key)\r\n          } else {\r\n            onChangeContent(node)\r\n          }\r\n        }}\r\n      >\r\n        <div className={styles.node}>\r\n          <p className={cn(styles.title, {\r\n              [styles.activeTitle]: content?.key === node.key,\r\n            })}\r\n          >\r\n            {hasChild && (\r\n              <FontAwesomeIcon icon={faCaretRight} className={styles.icon} />\r\n            )}\r\n            {node.label}\r\n          </p>\r\n        </div>\r\n      </div>\r\n      {hasChild && (\r\n        <div className={cn(styles.innerContainer, {\r\n            [styles.visible]: visible,\r\n          })}\r\n        >\r\n          <Tree data={node.children || []} {...common} />\r\n        </div>\r\n      )}\r\n    </li>\r\n  )\r\n}\r\nexport default TreeNode\r\n","import React from 'react'\r\nimport { IFolderData } from './types'\r\nimport { ICommon } from './types'\r\nimport styles from './styles.module.scss'\r\nimport TreeNode from 'containers/Public/Tree/TreeNode/index'\r\n\r\ninterface IPropsTree extends ICommon {\r\n  data: IFolderData[]\r\n}\r\n\r\nconst Tree: React.FC<IPropsTree> = ({ data = [], ...common }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <ul className={styles.treeList}>\r\n        {data.map(item => (\r\n          <TreeNode node={item} key={item.key} {...common} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nexport default Tree\r\n","import React from 'react'\r\nimport styles from './styles.module.scss'\r\n\r\ninterface IProps {\r\n  title?: string\r\n}\r\nconst Content: React.FC<IProps> = ({ title = 'content' }) => {\r\n  return (\r\n    <div className={styles.contentContainer}>\r\n      <p className={styles.title}>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content\r\n","import React, { useState } from 'react'\r\nimport IFolderData from 'models/index'\r\nimport treeData from 'utils/folderData'\r\nimport Header from 'components/Header'\r\nimport Tree from '../Tree'\r\nimport Content from '../Content'\r\nimport styles from './styles.module.scss'\r\n\r\nconst TreeList = () => {\r\n  const [content, setContent] = useState<IFolderData | null>(() => {\r\n    const items: any = localStorage.getItem('activeTitle')\r\n    if (items) {\r\n      const parsedItems: any = JSON.parse(items)\r\n      return parsedItems\r\n    }\r\n    return null\r\n  })\r\n  const [openedFolder, setOpenedFolder] = useState<string[]>(() => {\r\n    const items: any = localStorage.getItem('openedFolders')\r\n    if (items) {\r\n      const parsedItems: any = JSON.parse(items)\r\n      return parsedItems\r\n    }\r\n    return []\r\n  })\r\n\r\n  const onChangeContent = (node: IFolderData) => {\r\n    setContent(node)\r\n    localStorage.setItem('activeTitle', JSON.stringify(node))\r\n  }\r\n\r\n  const onChange = (key: string) => {\r\n    let arr = [...openedFolder]\r\n    const index = arr.indexOf(key)\r\n    if (index !== -1) {\r\n      arr.splice(index, 1)\r\n    } else {\r\n      arr = [...arr, key]\r\n    }\r\n    setOpenedFolder(arr)\r\n    setContent(null)\r\n    localStorage.setItem('openedFolders', JSON.stringify(arr))\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Header title=\"Tree Visualization component\" />\r\n      <div className={styles.containerTreeList}>\r\n        <div className={styles.wripper}>\r\n          <Tree\r\n            data={treeData}\r\n            openedItems={openedFolder}\r\n            content={content}\r\n            onChange={onChange}\r\n            onChangeContent={onChangeContent}\r\n          />\r\n        </div>\r\n        {content && <Content title={content.label} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TreeList\r\n","import React from 'react'\r\nimport styles from './styles.module.scss'\r\nimport Load from 'react-loader-spinner'\r\n\r\nconst Loader: React.FC = () => {\r\n  return (\r\n    <>\r\n      <div className={styles.loader}>\r\n        <Load\r\n          type=\"Circles\"\r\n          color=\"#227fcb\"\r\n          height={80}\r\n          width={80}\r\n          timeout={3000}\r\n        />\r\n        <h2 className={styles.loadingText}>...Loading</h2>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import Loader from 'components/Loader'\r\nimport * as React from 'react'\r\nimport styles from './styles.module.scss'\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <>\r\n      <div className={styles.container}>\r\n        <h2>HomePage</h2>\r\n        <Loader />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\nimport { Router, Switch, Route } from 'react-router'\r\nimport { Provider } from 'mobx-react'\r\nimport store from 'stores'\r\nimport history from 'utils/history'\r\nimport PrivateRoute from 'components/PrivateRoute'\r\nimport TreeList from 'containers/Public/TreeList'\r\nimport HomePage from 'containers/Public/HomePage'\r\n\r\nconst App = () => {\r\n  return (\r\n    <Provider {...store}>\r\n      <Router history={history}>\r\n        <Switch>\r\n          <PrivateRoute exact path=\"/private\" component={HomePage} />\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route exact path=\"/folderTree\" component={TreeList} />\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    )\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister()\r\n    })\r\n  }\r\n}\r\n","import './config'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\n// normalize and basic styles for application\r\nimport 'normalize.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'sources/styles/styles.scss'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}